name: Build and upload Docker image

on:
  push:
    branches:
      - main

env:
  REGION: asia-south1
  PROJECT: cssp-dhiway
  REPO: main
  IMAGE: sparknet
  CHAIN_NAME: 'Sparknet'
  SPEC_FOLDER_NAME: 'cssp'
  NUMBER_OF_NETWORK_MEMBERS: 8
  NUMBERS_OF_AUTHORISED_NODES: 8
  VALIDATOR: Yes
  RPC: Yes
  BOOT_NODE: Yes
  NUMBER_OF_VALIDATOR_NODES: 3
  RPC_STARTING_KEY_NUMBER: 4
  RPC_ENDING_KEY_NUMBER: 5
  BOOT_NODE_STARTING_KEY_NUMBER: 6
  BOOT_NODE_ENDING_KEY_NUMBER: 7
  BOOT_NODE_LOCAL_IDENTITY_1: 6
  BOOT_NODE_LOCAL_IDENTITY_2: 7
  
jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set current date time
        id: set_datetime
        run: |
          CURRENT_DATETIME=$(date +'%Y-%d-%m-%H-%M')
          echo "CURRENT_DATETIME=$CURRENT_DATETIME" >> $GITHUB_ENV
          
      - name: Set vars
        run: echo "IMAGE_TAG=$REGION-docker.pkg.dev/$PROJECT/$REPO/$IMAGE" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          rustup default stable
          rustup update
          rustup update nightly
          rustup target add wasm32-unknown-unknown --toolchain nightly
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev pkg-config
          sudo apt install --assume-yes build-essential git clang curl libssl-dev llvm libudev-dev make protobuf-compiler

      - name: Build the binary and create the keys
        run: |
          git clone https://github.com/dhiway/cord
          cd cord
          cargo build --release
          SEED_KEY=$(./target/release/cord key generate -n cord --words 24 --scheme Sr25519 | grep "Secret seed" | awk '{print $3}')
          ./scripts/bootstrap.sh -m 8 -n 8 -a 3 -o scripts -s "$SEED_KEY"
          sed -i 's/chain_name = "CORD Custom Chain"/chain_name = "'"$CHAIN_NAME"'"/g' ./scripts/config.toml
          sed -i 's/chain_type = "local"/chain_type = "live"/g' scripts/config.toml
          ./target/release/cord bootstrap-chain --config ./scripts/config.toml > ./scripts/$SPEC_FOLDER_NAME-spec.json
          ./target/release/cord build-spec --raw --chain ./scripts/$SPEC_FOLDER_NAME-spec.json > ./scripts/$SPEC_FOLDER_NAME-raw-spec.json
          cat ./scripts/config.toml
          ls -la ./scripts/
          cd ..
        
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_GKE }}"
         
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Upload nodes key to GCS
        run: gsutil -m cp -r ./cord/scripts/* gs://gke-testing-007/testing/
        
#      - name: Delete unwated files
#        run: gsutil rm gs://gke-testing-007/testing/gha-creds-*.json
        
      - name: Docker auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

#      - name: Build and push boot node images to GCR
#        run: |
#          if [ "$BOOT_NODE" == "Yes" ]; then
#            for i in {${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}..${{ env.BOOT_NODE_ENDING_KEY_NUMBER }}}; do
#              docker build -t ${{ env.IMAGE_TAG }}:${{ env.CURRENT_DATETIME }}-boot-node-$i --build-arg KEY=$i .
#              docker push ${{ env.IMAGE_TAG }}:${{ env.CURRENT_DATETIME }}-boot-node-$i
#            done;
#          else
#            echo "No boot nodes are mentioned to deploy"
#          fi
          
      - name: Configure kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
          install-missing: true

      - name: Authenticate with GKE Cluster
        run: |-
          gcloud auth list
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials cssp-testing --region asia-south1 --project cssp-dhiway

      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.0.0'

      - name: Deploy boot node to GKE
        run: |
          if [ "$BOOT_NODE" == "Yes" ]; then
            for i in {${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}..${{ env.BOOT_NODE_ENDING_KEY_NUMBER }}}; do
              helm install ${{ env.IMAGE }}-boot-node-$i ./helm/ --values ./helm/values.yaml --set image.repository=dhiway/cord --set image.tag=develop --set rawSpec=$SPEC_FOLDER_NAME-raw-spec.json --set nodeKey=node$i.key
              sleep 5
              echo "BOOT_NODE_POD_NAME_$i=$(kubectl get pods | grep boot-node-$i | awk '{print $1}')" >> $GITHUB_ENV
              echo "$BOOT_NODE_POD_NAME_$i"          
              echo "BOOT_NODE_LOCAL_ID_$i=$(kubectl logs ${BOOT_NODE_POD_NAME_$i} | grep -i "Local node identity" | awk '{print $8}')" >> $GITHUB_ENV
              echo "$BOOT_NODE_LOCAL_ID_$i"
            done
          else
            echo "No boot nodes are mentioned to deploy"
          fi
          
      - name: Building and pushing Docker images for other nodes to GCR
        run: |
          TOTAL_NUMBER_OF_BOOT_NODES=$(($BOOT_NODE_ENDING_KEY_NUMBER - $BOOT_NODE_STARTING_KEY_NUMBER + 1))
          if [ "$TOTAL_NUMBER_OF_BOOT_NODES" == 1 ]; then
            BOOT_NODE_LOCAL_IDENTITY_1=BOOT_NODE_LOCAL_IDENTITY_${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}
            sed -i 's/"bootNodes": \[\]/"bootNodes": \["\/ip4\/10.1.1.1\/tcp\/30333\/p2p\/${{ env.BOOT_NODE_LOCAL_IDENTITY_1 }}"\]/g' ./cord/scripts/$SPEC_FOLDER_NAME-raw-spec.json
            head ./cord/scripts/$SPEC_FOLDER_NAME-raw-spec.json
          elif [ "$TOTAL_NUMBER_OF_BOOT_NODES" == 2 ]; then
            BOOT_NODE_LOCAL_IDENTITY_1=BOOT_NODE_LOCAL_IDENTITY_${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}
            BOOT_NODE_LOCAL_IDENTITY_2=BOOT_NODE_LOCAL_IDENTITY_${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}+1
            sed -i 's/"bootNodes": \[\]/"bootNodes": \["\/ip4\/10.1.1.1\/tcp\/30333\/p2p\/${{ env.BOOT_NODE_LOCAL_IDENTITY_1 }}","\/ip4\/1.0.0.0\/tcp\/30333\/p2p\/${{ env.BOOT_NODE_LOCAL_IDENTITY_2 }}"\]/g' ./cord/scripts/$SPEC_FOLDER_NAME-raw-spec.json
            head ./cord/scripts/$SPEC_FOLDER_NAME-raw-spec.json
          elif [ "$TOTAL_NUMBER_OF_BOOT_NODES" == 3 ]; then
            BOOT_NODE_LOCAL_IDENTITY_1=BOOT_NODE_LOCAL_IDENTITY_${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}
            BOOT_NODE_LOCAL_IDENTITY_2=BOOT_NODE_LOCAL_IDENTITY_${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}+1
            BOOT_NODE_LOCAL_IDENTITY_3=BOOT_NODE_LOCAL_IDENTITY_${{ env.BOOT_NODE_STARTING_KEY_NUMBER }}+2
            sed -i 's/"bootNodes": \[\]/"bootNodes": \["\/ip4\/10.1.1.1\/tcp\/30333\/p2p\/${{ env.BOOT_NODE_LOCAL_IDENTITY_1 }}","\/ip4\/1.0.0.0\/tcp\/30333\/p2p\/${{ env.BOOT_NODE_LOCAL_IDENTITY_2 }}","\/ip4\/1.0.0.0\/tcp\/30333\/p2p\/${{ env.BOOT_NODE_LOCAL_IDENTITY_3 }}"\]/g' ./cord/scripts/$SPEC_FOLDER_NAME-raw-spec.json
            head ./cord/scripts/$SPEC_FOLDER_NAME-raw-spec.json
          else
            echo "No need to update spec file.."
          fi
          
          if [ "$VALIDATOR" == "Yes" ]; then
            for i in {1..${{ env.NUMBER_OF_VALIDATOR_NODES }}}; do 
              docker build -t ${{ env.IMAGE_TAG }}:${{ env.CURRENT_DATETIME }}-validator-$i --build-arg KEY=$i --build-arg SPEC_FOLDER_NAME=$SPEC_FOLDER_NAME .
              docker push ${{ env.IMAGE_TAG }}:${{ env.CURRENT_DATETIME }}-validator-$i
            done;
          else
            echo "No validator nodes are mentioned to deploy"
          fi

          if [ "$RPC" == "Yes" ]; then
            for i in {${{ env.RPC_STARTING_KEY_NUMBER }}..${{ env.RPC_ENDING_KEY_NUMBER }}}; do
              docker build -t ${{ env.IMAGE_TAG }}:${{ env.CURRENT_DATETIME }}-rpc-$i --build-arg KEY=$i .
              docker push ${{ env.IMAGE_TAG }}:${{ env.CURRENT_DATETIME }}-rpc-$i
            done;
          else
            echo "No RPC nodes are mentioned to deploy"
          fi

      - name: Deploy other nodes to GKE
        run: |
          if [ "$VALIDATOR" == "Yes" ]; then
            for i in {1..${{ env.NUMBER_OF_VALIDATOR_NODES }}}; do
              helm install ${{ env.IMAGE }}-validator-$i ./helm/ --values ./helm/values.yaml --set validator.enabled=true --set image.repository=${{ env.IMAGE_TAG }} --set image.tag=${{ env.CURRENT_DATETIME }}-validator-$i --set rawSpec=$SPEC_FOLDER_NAME-raw-spec.json --set nodeKey=node$i.key
            done;
          else
            echo "No validator is mentioned to deploy"
          fi

          if [ "$RPC" == "Yes" ]; then
            for i in {${{ env.RPC_STARTING_KEY_NUMBER }}..${{ env.RPC_ENDING_KEY_NUMBER }}}; do
              helm install ${{ env.IMAGE }}-rpc-$i ./helm/ --values ./helm/values.yaml --set image.repository=${{ env.IMAGE_TAG }} --set image.tag=${{ env.CURRENT_DATETIME }}-rpc-$i
            done;
          else
            echo "No validator is mentioned to deploy"
          fi
